{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Intro to Pandas - HW version","provenance":[{"file_id":"1r6wSuXBqtZW_G057VOhHMTs9Xle9ZBzK","timestamp":1585888750970},{"file_id":"1gQUXVPGZp7zUwHjZdHyc1dlVhcAEls5S","timestamp":1585429990611},{"file_id":"150vIOSNru8lc_J2fy4EyRvIoab81HjqH","timestamp":1560672997383}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"1KTg2OT_nsKe","colab_type":"code","colab":{}},"source":["import numpy as np\n","import pandas as pd"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SDAOPNnpvV9p","colab_type":"text"},"source":["# Data Structures in Pandas\n","\n","There are a few different types of data structures in Pandas.\n","\n","* Series (similar to lists)\n","* Data Frames (similar to 2D numpy arrays)\n"]},{"cell_type":"markdown","metadata":{"id":"o-GAlcTLvm6x","colab_type":"text"},"source":["## Series Objects\n","\n","We'll begin by looking at some of the properties of Series objects in Pandas. We create Series objects with the function `pd.Series`, which can take Python lists."]},{"cell_type":"code","metadata":{"id":"J8CIFJPpoMoR","colab_type":"code","outputId":"bf8d514a-3602-4a65-a1d5-b5ee1cd8aa0f","executionInfo":{"status":"ok","timestamp":1586102218866,"user_tz":420,"elapsed":1033,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"colab":{"base_uri":"https://localhost:8080/","height":136}},"source":["a = pd.Series([1, 2, 3, 4, 5, \"Hello, World!\"])\n","print(a) "],"execution_count":2,"outputs":[{"output_type":"stream","text":["0                1\n","1                2\n","2                3\n","3                4\n","4                5\n","5    Hello, World!\n","dtype: object\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"hep_hz2Pv9hM","colab_type":"text"},"source":["You can specify an `index` array for Series objects. If you don't specify any indices, the indices will default to your usual list indices (i.e., 0, 1, 2, ...). "]},{"cell_type":"code","metadata":{"id":"UhHpK0NVqU_s","colab_type":"code","outputId":"4ba09f4a-8781-4bab-e240-e0de234b7ec3","executionInfo":{"status":"ok","timestamp":1586102218867,"user_tz":420,"elapsed":1022,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["a = pd.Series([1, 2, 3], index=['first', 'second', 'third'])\n","print(a)"],"execution_count":3,"outputs":[{"output_type":"stream","text":["first     1\n","second    2\n","third     3\n","dtype: int64\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"F_hKmBumwSRH","colab_type":"text"},"source":["You can also initialize the indices and the Series values with a Python dictionary."]},{"cell_type":"code","metadata":{"id":"7rniX5ZFwYb4","colab_type":"code","outputId":"af00a942-9025-491b-9977-98c436edd6e3","executionInfo":{"status":"ok","timestamp":1586102218868,"user_tz":420,"elapsed":1012,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["a = {'first': 1, 'second': 2, 'third': 3}\n","print(pd.Series(a))"],"execution_count":4,"outputs":[{"output_type":"stream","text":["first     1\n","second    2\n","third     3\n","dtype: int64\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"h_BwNkXdwagy","colab_type":"text"},"source":["You can index and slice into specific entries of Series objects just like normal. "]},{"cell_type":"code","metadata":{"id":"7ckpH6JSs2u9","colab_type":"code","outputId":"cd31a28b-2918-484d-855b-62bc19a0221f","executionInfo":{"status":"ok","timestamp":1586102218868,"user_tz":420,"elapsed":1001,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"colab":{"base_uri":"https://localhost:8080/","height":187}},"source":["# Indexing with default indices.\n","a = pd.Series(range(100, 110))\n","print(a[2])\n","print(a[3:])\n","\n","# Indexing with custom indices.\n","a = pd.Series({'first': 1, 'second': 2, 'third': 3})\n","print(a['first'])"],"execution_count":5,"outputs":[{"output_type":"stream","text":["102\n","3    103\n","4    104\n","5    105\n","6    106\n","7    107\n","8    108\n","9    109\n","dtype: int64\n","1\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"5S4LYsboxCqq","colab_type":"text"},"source":["Most numpy functions and normal operations work with Series objects."]},{"cell_type":"code","metadata":{"id":"g_jkRi1ywbNn","colab_type":"code","outputId":"8af0d38d-aada-4104-b8ff-118c742409f2","executionInfo":{"status":"ok","timestamp":1586102218869,"user_tz":420,"elapsed":990,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"colab":{"base_uri":"https://localhost:8080/","height":221}},"source":["random_vec = pd.Series(np.random.randn(3))\n","print(random_vec)\n","print(random_vec + random_vec * 10)\n","print(np.exp(random_vec))"],"execution_count":6,"outputs":[{"output_type":"stream","text":["0   -0.132392\n","1   -0.286551\n","2    0.489337\n","dtype: float64\n","0   -1.456310\n","1   -3.152057\n","2    5.382710\n","dtype: float64\n","0    0.875998\n","1    0.750849\n","2    1.631235\n","dtype: float64\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"PvZjhCGkxK4a","colab_type":"text"},"source":["Series objects will automatically align by index during operations."]},{"cell_type":"code","metadata":{"id":"yH7dMeV2uMgQ","colab_type":"code","outputId":"604e7473-1b8c-43a9-efb4-b5c5712d7b5d","executionInfo":{"status":"ok","timestamp":1586102218869,"user_tz":420,"elapsed":979,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"colab":{"base_uri":"https://localhost:8080/","height":119}},"source":["random_vec = pd.Series(np.random.randn(5))\n","print(random_vec + random_vec[1:4])"],"execution_count":7,"outputs":[{"output_type":"stream","text":["0         NaN\n","1    3.365242\n","2   -1.896857\n","3    2.787225\n","4         NaN\n","dtype: float64\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"uR8hJ81CT-DQ","colab_type":"text"},"source":["Just as in numpy, you can get the dimensions of a given Series object with the `shape` property."]},{"cell_type":"code","metadata":{"id":"yuHowrWLUDmp","colab_type":"code","outputId":"7bc63943-643f-40df-a96c-bbf8001423da","executionInfo":{"status":"ok","timestamp":1586102218870,"user_tz":420,"elapsed":969,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["random_vec = pd.Series(np.random.randn(5))\n","print(random_vec.shape)"],"execution_count":8,"outputs":[{"output_type":"stream","text":["(5,)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"m0NgSk3-xUxc","colab_type":"text"},"source":["## Data Frames\n","\n","A DataFrame object is a 2D object with labeled rows and columns. We can create DataFrames from Python dictionaries, where each value is a column."]},{"cell_type":"code","metadata":{"id":"P_kZLKAFvMhA","colab_type":"code","outputId":"da2c1214-66ae-498b-ff83-e116fae07c07","executionInfo":{"status":"ok","timestamp":1586102219188,"user_tz":420,"elapsed":1275,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["a = pd.DataFrame({'one': [3, 4, 5], 'two': [5, 12, 13], 'three': [21, 20, 29]})\n","print(a)"],"execution_count":9,"outputs":[{"output_type":"stream","text":["   one  two  three\n","0    3    5     21\n","1    4   12     20\n","2    5   13     29\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"9cTSXPRcykVd","colab_type":"text"},"source":["If you specify an `index` parameter, you can set the row labels as well."]},{"cell_type":"code","metadata":{"id":"zllaR9W0yeCt","colab_type":"code","outputId":"c9b216bc-66a4-4c54-ed12-2e2d3b9e037c","executionInfo":{"status":"ok","timestamp":1586102219190,"user_tz":420,"elapsed":1266,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["a = pd.DataFrame(\n","    {'one': [3, 4, 5], 'two': [5, 12, 13], 'three': [21, 20, 29]},\n","    index=['leg1', 'leg2', 'hypotenuse']\n",")\n","print(a)"],"execution_count":10,"outputs":[{"output_type":"stream","text":["            one  two  three\n","leg1          3    5     21\n","leg2          4   12     20\n","hypotenuse    5   13     29\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"zMsp-WkTzNdD","colab_type":"text"},"source":["You can use the `columns` parameter to specify which columns should be shown and in what order (if a column is specified which doesn't exist in the input dictionary, it's values will be `NaN`)."]},{"cell_type":"code","metadata":{"id":"ayW1Z7EszTux","colab_type":"code","outputId":"c3f70155-e22a-4ffd-820f-aff581c1ddf7","executionInfo":{"status":"ok","timestamp":1586102219192,"user_tz":420,"elapsed":1257,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["a = pd.DataFrame(\n","    {'one': [3, 4, 5], 'two': [5, 12, 13], 'three': [21, 20, 29]},\n","    index=['leg1', 'leg2', 'hypotenuse'],\n","    columns=['three', 'one', 'four']\n",")\n","print(a)"],"execution_count":11,"outputs":[{"output_type":"stream","text":["            three  one four\n","leg1           21    3  NaN\n","leg2           20    4  NaN\n","hypotenuse     29    5  NaN\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"6eWCrvkSy27q","colab_type":"text"},"source":["You can also create DataFrames from dictionaries where the values are Series objects. "]},{"cell_type":"code","metadata":{"id":"CDuJhmE4yzeH","colab_type":"code","outputId":"119cc905-56d2-44a1-bab3-25857748ea5a","executionInfo":{"status":"ok","timestamp":1586102219197,"user_tz":420,"elapsed":1251,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["a = pd.DataFrame(\n","  {\n","      'fib': pd.Series([1, 1, 2, 3, 5], index=['a0', 'a1', 'a2', 'a3', 'a4']),\n","      'pi': pd.Series([3, 1, 4, 1, 5, 9], index=['a0', 'a1', 'a2', 'a3', 'a4', 'a5']),\n","      'alt': pd.Series([-1, 1, -1, 1,], index=['a0', 'a1', 'a2', 'a3']),\n","  },\n","  index=['a0', 'a2', 'a4'],\n",")\n","print(a)"],"execution_count":12,"outputs":[{"output_type":"stream","text":["    fib  pi  alt\n","a0    1   3 -1.0\n","a2    2   4 -1.0\n","a4    5   5  NaN\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"8IAigXl42woF","colab_type":"text"},"source":["You can create DataFrames straight from 2D numpy arrays (if you want anything other than the default column and row labels, you'll have to specify them yourself)."]},{"cell_type":"code","metadata":{"id":"zBoEoETL2xMj","colab_type":"code","outputId":"ae123e03-1369-4386-a758-516d17daaffe","executionInfo":{"status":"ok","timestamp":1586102219197,"user_tz":420,"elapsed":1240,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["a = pd.DataFrame(np.random.randn(3, 5))\n","print(a)"],"execution_count":13,"outputs":[{"output_type":"stream","text":["          0         1         2         3         4\n","0 -0.092734 -0.882252 -0.962521  1.450971  0.441120\n","1 -0.289242  0.478994 -1.017743 -0.771993 -0.748997\n","2  1.075424 -0.196073  1.182475  0.330862  0.947756\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"7bcv1o77UL_N","colab_type":"text"},"source":["Similarly, the `shape` property still work just like normal numpy."]},{"cell_type":"code","metadata":{"id":"35luGGCeUP2W","colab_type":"code","outputId":"390358e1-3291-4b44-ca89-1b2d85f7f771","executionInfo":{"status":"ok","timestamp":1586102219198,"user_tz":420,"elapsed":1230,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["a = pd.DataFrame(np.random.randn(3, 5))\n","print(a.shape)"],"execution_count":14,"outputs":[{"output_type":"stream","text":["(3, 5)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"orvpyLUv05ON","colab_type":"text"},"source":["Columns in a DataFrame can have different types."]},{"cell_type":"code","metadata":{"id":"1LFSq2R10XpK","colab_type":"code","outputId":"d957e7cf-69cf-4b2a-f2ac-89e722a365ca","executionInfo":{"status":"ok","timestamp":1586102219199,"user_tz":420,"elapsed":1220,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"colab":{"base_uri":"https://localhost:8080/","height":221}},"source":["a = pd.DataFrame(\n","    {\n","        'A': 1.,\n","        'B': pd.Timestamp('20130102'),\n","        'C': pd.Series(1, index=list(range(4)), dtype='float32'),\n","        'D': np.array([3] * 4, dtype='int32'),\n","        'E': pd.Categorical([\"test\", \"train\", \"test\", \"train\"]),\n","        'F': 'foo'\n","    }\n",")\n","print(a)\n","print(a.dtypes)"],"execution_count":15,"outputs":[{"output_type":"stream","text":["     A          B    C  D      E    F\n","0  1.0 2013-01-02  1.0  3   test  foo\n","1  1.0 2013-01-02  1.0  3  train  foo\n","2  1.0 2013-01-02  1.0  3   test  foo\n","3  1.0 2013-01-02  1.0  3  train  foo\n","A           float64\n","B    datetime64[ns]\n","C           float32\n","D             int32\n","E          category\n","F            object\n","dtype: object\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"NHFrnlSvO1z_","colab_type":"text"},"source":["You can modify the column labels directly."]},{"cell_type":"code","metadata":{"id":"2ZGhoHL2O3z3","colab_type":"code","outputId":"46a56e4f-072d-474e-e1a4-f62af06df0c1","executionInfo":{"status":"ok","timestamp":1586102219200,"user_tz":420,"elapsed":1211,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"colab":{"base_uri":"https://localhost:8080/","height":102}},"source":["a = pd.DataFrame(\n","    {\n","        'A': 1.,\n","        'B': pd.Timestamp('20130102'),\n","        'C': pd.Series(1, index=list(range(4)), dtype='float32'),\n","        'D': np.array([3] * 4, dtype='int32'),\n","        'E': pd.Categorical([\"test\", \"train\", \"test\", \"train\"]),\n","        'F': 'foo'\n","    }\n",")\n","a.columns = ['G', 'H', 'I', 'J', 'K', 'L']\n","print(a)"],"execution_count":16,"outputs":[{"output_type":"stream","text":["     G          H    I  J      K    L\n","0  1.0 2013-01-02  1.0  3   test  foo\n","1  1.0 2013-01-02  1.0  3  train  foo\n","2  1.0 2013-01-02  1.0  3   test  foo\n","3  1.0 2013-01-02  1.0  3  train  foo\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"W7Eg5Yy-QRAe","colab_type":"text"},"source":["Just like with Series objects, slicing and indexing in DataFrame objects works like normal. If you index by a column, you get a Series object."]},{"cell_type":"code","metadata":{"id":"6rUVtW3OQbHq","colab_type":"code","outputId":"f4fc690b-9048-4b97-bc68-d96f301dfd44","executionInfo":{"status":"ok","timestamp":1586102219201,"user_tz":420,"elapsed":1201,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["a = pd.DataFrame(\n","    {\n","        'A': 1.,\n","        'B': pd.Timestamp('20130102'),\n","        'C': pd.Series(1, index=list(range(4)), dtype='float32'),\n","        'D': np.array([3] * 4, dtype='int32'),\n","        'E': pd.Categorical([\"test\", \"train\", \"test\", \"train\"]),\n","        'F': 'foo'\n","    }\n",")\n","print(a[0:3])\n","print(\"\\n\")\n","print(a['D'])"],"execution_count":17,"outputs":[{"output_type":"stream","text":["     A          B    C  D      E    F\n","0  1.0 2013-01-02  1.0  3   test  foo\n","1  1.0 2013-01-02  1.0  3  train  foo\n","2  1.0 2013-01-02  1.0  3   test  foo\n","\n","\n","0    3\n","1    3\n","2    3\n","3    3\n","Name: D, dtype: int32\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"iU6cmfWg18U9","colab_type":"text"},"source":["# Intro to Working with Data in Pandas\n","\n","Let's work with the Iris dataset (a familiar dataset from Sci-Kit Learn) in Pandas."]},{"cell_type":"code","metadata":{"id":"fbXGLhoP0m_c","colab_type":"code","outputId":"d5ba7844-a73d-47a2-f3ba-0daf525afc84","executionInfo":{"status":"ok","timestamp":1586102219910,"user_tz":420,"elapsed":1898,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"colab":{"base_uri":"https://localhost:8080/","height":255}},"source":["from sklearn import datasets\n","iris = datasets.load_iris()\n","print(iris['data'][0:10, :], iris['target'], iris['feature_names'])"],"execution_count":18,"outputs":[{"output_type":"stream","text":["[[5.1 3.5 1.4 0.2]\n"," [4.9 3.  1.4 0.2]\n"," [4.7 3.2 1.3 0.2]\n"," [4.6 3.1 1.5 0.2]\n"," [5.  3.6 1.4 0.2]\n"," [5.4 3.9 1.7 0.4]\n"," [4.6 3.4 1.4 0.3]\n"," [5.  3.4 1.5 0.2]\n"," [4.4 2.9 1.4 0.2]\n"," [4.9 3.1 1.5 0.1]] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n"," 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n"," 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2\n"," 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n"," 2 2] ['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"-qour4dp2mLh","colab_type":"text"},"source":["First, we will convert the data into a Pandas DataFrame."]},{"cell_type":"code","metadata":{"id":"1TdWy7AI2fzE","colab_type":"code","outputId":"03f36147-1889-4d04-b8a3-26f671689c45","executionInfo":{"status":"ok","timestamp":1586102219911,"user_tz":420,"elapsed":1888,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"colab":{"base_uri":"https://localhost:8080/","height":255}},"source":["targets = np.reshape(iris['target'], newshape=(len(iris['data']), 1))\n","new_data = np.concatenate((iris['data'], targets), axis=1)\n","iris = pd.DataFrame(\n","    data=new_data, \n","    columns=iris['feature_names'] + ['target']\n",")\n","print(iris)"],"execution_count":19,"outputs":[{"output_type":"stream","text":["     sepal length (cm)  sepal width (cm)  ...  petal width (cm)  target\n","0                  5.1               3.5  ...               0.2     0.0\n","1                  4.9               3.0  ...               0.2     0.0\n","2                  4.7               3.2  ...               0.2     0.0\n","3                  4.6               3.1  ...               0.2     0.0\n","4                  5.0               3.6  ...               0.2     0.0\n","..                 ...               ...  ...               ...     ...\n","145                6.7               3.0  ...               2.3     2.0\n","146                6.3               2.5  ...               1.9     2.0\n","147                6.5               3.0  ...               2.0     2.0\n","148                6.2               3.4  ...               2.3     2.0\n","149                5.9               3.0  ...               1.8     2.0\n","\n","[150 rows x 5 columns]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"8hHPINCn4axO","colab_type":"text"},"source":["That's a lot of data! We can see just the beginning of the DataFrame with the `head` method."]},{"cell_type":"code","metadata":{"id":"Wp8dY67x3nPi","colab_type":"code","outputId":"949749ed-5257-4286-86c8-96f5fe2e61af","executionInfo":{"status":"ok","timestamp":1586102219912,"user_tz":420,"elapsed":1876,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["iris.head()"],"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal length (cm)</th>\n","      <th>sepal width (cm)</th>\n","      <th>petal length (cm)</th>\n","      <th>petal width (cm)</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.1</td>\n","      <td>3.5</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.9</td>\n","      <td>3.0</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.7</td>\n","      <td>3.2</td>\n","      <td>1.3</td>\n","      <td>0.2</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4.6</td>\n","      <td>3.1</td>\n","      <td>1.5</td>\n","      <td>0.2</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5.0</td>\n","      <td>3.6</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   sepal length (cm)  sepal width (cm)  ...  petal width (cm)  target\n","0                5.1               3.5  ...               0.2     0.0\n","1                4.9               3.0  ...               0.2     0.0\n","2                4.7               3.2  ...               0.2     0.0\n","3                4.6               3.1  ...               0.2     0.0\n","4                5.0               3.6  ...               0.2     0.0\n","\n","[5 rows x 5 columns]"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"markdown","metadata":{"id":"-4Zl80ga4jeq","colab_type":"text"},"source":["Similarly, the `tail()` method shows the end."]},{"cell_type":"code","metadata":{"id":"oPG34vUT3SqY","colab_type":"code","outputId":"99651ef5-459d-446b-c320-845d0f09e6a3","executionInfo":{"status":"ok","timestamp":1586102219913,"user_tz":420,"elapsed":1865,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["iris.tail()"],"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal length (cm)</th>\n","      <th>sepal width (cm)</th>\n","      <th>petal length (cm)</th>\n","      <th>petal width (cm)</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>145</th>\n","      <td>6.7</td>\n","      <td>3.0</td>\n","      <td>5.2</td>\n","      <td>2.3</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>146</th>\n","      <td>6.3</td>\n","      <td>2.5</td>\n","      <td>5.0</td>\n","      <td>1.9</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>147</th>\n","      <td>6.5</td>\n","      <td>3.0</td>\n","      <td>5.2</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>148</th>\n","      <td>6.2</td>\n","      <td>3.4</td>\n","      <td>5.4</td>\n","      <td>2.3</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>149</th>\n","      <td>5.9</td>\n","      <td>3.0</td>\n","      <td>5.1</td>\n","      <td>1.8</td>\n","      <td>2.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     sepal length (cm)  sepal width (cm)  ...  petal width (cm)  target\n","145                6.7               3.0  ...               2.3     2.0\n","146                6.3               2.5  ...               1.9     2.0\n","147                6.5               3.0  ...               2.0     2.0\n","148                6.2               3.4  ...               2.3     2.0\n","149                5.9               3.0  ...               1.8     2.0\n","\n","[5 rows x 5 columns]"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"markdown","metadata":{"id":"UuzjMd4QPONf","colab_type":"text"},"source":["We can get some quick statistics on our data with the `describe()` method."]},{"cell_type":"code","metadata":{"id":"_r1TC8-E4mTv","colab_type":"code","outputId":"6f8919c9-7d28-48f6-f7c0-54e53a59b67d","executionInfo":{"status":"ok","timestamp":1586102219913,"user_tz":420,"elapsed":1855,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"colab":{"base_uri":"https://localhost:8080/","height":297}},"source":["iris.describe()"],"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal length (cm)</th>\n","      <th>sepal width (cm)</th>\n","      <th>petal length (cm)</th>\n","      <th>petal width (cm)</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>150.000000</td>\n","      <td>150.000000</td>\n","      <td>150.000000</td>\n","      <td>150.000000</td>\n","      <td>150.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>5.843333</td>\n","      <td>3.057333</td>\n","      <td>3.758000</td>\n","      <td>1.199333</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>0.828066</td>\n","      <td>0.435866</td>\n","      <td>1.765298</td>\n","      <td>0.762238</td>\n","      <td>0.819232</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>4.300000</td>\n","      <td>2.000000</td>\n","      <td>1.000000</td>\n","      <td>0.100000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>5.100000</td>\n","      <td>2.800000</td>\n","      <td>1.600000</td>\n","      <td>0.300000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>5.800000</td>\n","      <td>3.000000</td>\n","      <td>4.350000</td>\n","      <td>1.300000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>6.400000</td>\n","      <td>3.300000</td>\n","      <td>5.100000</td>\n","      <td>1.800000</td>\n","      <td>2.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>7.900000</td>\n","      <td>4.400000</td>\n","      <td>6.900000</td>\n","      <td>2.500000</td>\n","      <td>2.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       sepal length (cm)  sepal width (cm)  ...  petal width (cm)      target\n","count         150.000000        150.000000  ...        150.000000  150.000000\n","mean            5.843333          3.057333  ...          1.199333    1.000000\n","std             0.828066          0.435866  ...          0.762238    0.819232\n","min             4.300000          2.000000  ...          0.100000    0.000000\n","25%             5.100000          2.800000  ...          0.300000    0.000000\n","50%             5.800000          3.000000  ...          1.300000    1.000000\n","75%             6.400000          3.300000  ...          1.800000    2.000000\n","max             7.900000          4.400000  ...          2.500000    2.000000\n","\n","[8 rows x 5 columns]"]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"markdown","metadata":{"id":"DZqgEBnLPhIe","colab_type":"text"},"source":["Perhaps we want to investigate how different columns affect the target column. We can easily sort by a given column.\n","\n"]},{"cell_type":"code","metadata":{"id":"v9oMp8YCPVuv","colab_type":"code","outputId":"13b56757-0d94-4952-b951-e1f749588389","executionInfo":{"status":"ok","timestamp":1586102219914,"user_tz":420,"elapsed":1845,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["iris.sort_values(by='sepal width (cm)').head()"],"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal length (cm)</th>\n","      <th>sepal width (cm)</th>\n","      <th>petal length (cm)</th>\n","      <th>petal width (cm)</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>60</th>\n","      <td>5.0</td>\n","      <td>2.0</td>\n","      <td>3.5</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>62</th>\n","      <td>6.0</td>\n","      <td>2.2</td>\n","      <td>4.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>119</th>\n","      <td>6.0</td>\n","      <td>2.2</td>\n","      <td>5.0</td>\n","      <td>1.5</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>68</th>\n","      <td>6.2</td>\n","      <td>2.2</td>\n","      <td>4.5</td>\n","      <td>1.5</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>41</th>\n","      <td>4.5</td>\n","      <td>2.3</td>\n","      <td>1.3</td>\n","      <td>0.3</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     sepal length (cm)  sepal width (cm)  ...  petal width (cm)  target\n","60                 5.0               2.0  ...               1.0     1.0\n","62                 6.0               2.2  ...               1.0     1.0\n","119                6.0               2.2  ...               1.5     2.0\n","68                 6.2               2.2  ...               1.5     1.0\n","41                 4.5               2.3  ...               0.3     0.0\n","\n","[5 rows x 5 columns]"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"code","metadata":{"id":"6SGnCNkdQCwA","colab_type":"code","outputId":"1877c926-323a-4c2b-f370-034ee3ce0e81","executionInfo":{"status":"ok","timestamp":1586102219914,"user_tz":420,"elapsed":1834,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["iris.sort_values(by='sepal length (cm)').head()"],"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal length (cm)</th>\n","      <th>sepal width (cm)</th>\n","      <th>petal length (cm)</th>\n","      <th>petal width (cm)</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>13</th>\n","      <td>4.3</td>\n","      <td>3.0</td>\n","      <td>1.1</td>\n","      <td>0.1</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>42</th>\n","      <td>4.4</td>\n","      <td>3.2</td>\n","      <td>1.3</td>\n","      <td>0.2</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>38</th>\n","      <td>4.4</td>\n","      <td>3.0</td>\n","      <td>1.3</td>\n","      <td>0.2</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>4.4</td>\n","      <td>2.9</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>41</th>\n","      <td>4.5</td>\n","      <td>2.3</td>\n","      <td>1.3</td>\n","      <td>0.3</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    sepal length (cm)  sepal width (cm)  ...  petal width (cm)  target\n","13                4.3               3.0  ...               0.1     0.0\n","42                4.4               3.2  ...               0.2     0.0\n","38                4.4               3.0  ...               0.2     0.0\n","8                 4.4               2.9  ...               0.2     0.0\n","41                4.5               2.3  ...               0.3     0.0\n","\n","[5 rows x 5 columns]"]},"metadata":{"tags":[]},"execution_count":24}]},{"cell_type":"markdown","metadata":{"id":"303SIqruVCvk","colab_type":"text"},"source":["Perhaps we want to look at the difference in column values for different values of `target` (i.e., different classes). We can start by grouping the data by the target values."]},{"cell_type":"code","metadata":{"id":"o0NepXu8VCPi","colab_type":"code","colab":{}},"source":["grouped_iris = iris.groupby(by='target')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4dzZwOyeVW-4","colab_type":"text"},"source":["GroupBy objects are another type of object in Pandas. We can compute various functions on each group of rows -- see the documentation [here](https://pandas.pydata.org/pandas-docs/stable/reference/groupby.html)."]},{"cell_type":"code","metadata":{"id":"Q2jIV8lPVoX4","colab_type":"code","outputId":"341c7513-6324-4013-c32e-f39573d546c4","executionInfo":{"status":"ok","timestamp":1586102219915,"user_tz":420,"elapsed":1822,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"colab":{"base_uri":"https://localhost:8080/","height":102}},"source":["grouped_iris.size()"],"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["target\n","0.0    50\n","1.0    50\n","2.0    50\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":26}]},{"cell_type":"code","metadata":{"id":"-2bsVddGVul_","colab_type":"code","outputId":"561a13c7-937a-4781-8daf-4ed67d076237","executionInfo":{"status":"ok","timestamp":1586102219916,"user_tz":420,"elapsed":1813,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"colab":{"base_uri":"https://localhost:8080/","height":173}},"source":["grouped_iris.std()"],"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal length (cm)</th>\n","      <th>sepal width (cm)</th>\n","      <th>petal length (cm)</th>\n","      <th>petal width (cm)</th>\n","    </tr>\n","    <tr>\n","      <th>target</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0.0</th>\n","      <td>0.352490</td>\n","      <td>0.379064</td>\n","      <td>0.173664</td>\n","      <td>0.105386</td>\n","    </tr>\n","    <tr>\n","      <th>1.0</th>\n","      <td>0.516171</td>\n","      <td>0.313798</td>\n","      <td>0.469911</td>\n","      <td>0.197753</td>\n","    </tr>\n","    <tr>\n","      <th>2.0</th>\n","      <td>0.635880</td>\n","      <td>0.322497</td>\n","      <td>0.551895</td>\n","      <td>0.274650</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["        sepal length (cm)  ...  petal width (cm)\n","target                     ...                  \n","0.0              0.352490  ...          0.105386\n","1.0              0.516171  ...          0.197753\n","2.0              0.635880  ...          0.274650\n","\n","[3 rows x 4 columns]"]},"metadata":{"tags":[]},"execution_count":27}]},{"cell_type":"code","metadata":{"id":"7Mm_Z2CoV1i7","colab_type":"code","outputId":"36cdded6-833a-41c7-fa44-086deaf65a07","executionInfo":{"status":"ok","timestamp":1586102219916,"user_tz":420,"elapsed":1802,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"colab":{"base_uri":"https://localhost:8080/","height":173}},"source":["grouped_iris.sum()"],"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal length (cm)</th>\n","      <th>sepal width (cm)</th>\n","      <th>petal length (cm)</th>\n","      <th>petal width (cm)</th>\n","    </tr>\n","    <tr>\n","      <th>target</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0.0</th>\n","      <td>250.3</td>\n","      <td>171.4</td>\n","      <td>73.1</td>\n","      <td>12.3</td>\n","    </tr>\n","    <tr>\n","      <th>1.0</th>\n","      <td>296.8</td>\n","      <td>138.5</td>\n","      <td>213.0</td>\n","      <td>66.3</td>\n","    </tr>\n","    <tr>\n","      <th>2.0</th>\n","      <td>329.4</td>\n","      <td>148.7</td>\n","      <td>277.6</td>\n","      <td>101.3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["        sepal length (cm)  ...  petal width (cm)\n","target                     ...                  \n","0.0                 250.3  ...              12.3\n","1.0                 296.8  ...              66.3\n","2.0                 329.4  ...             101.3\n","\n","[3 rows x 4 columns]"]},"metadata":{"tags":[]},"execution_count":28}]},{"cell_type":"markdown","metadata":{"id":"Bg7atqxFQzp5","colab_type":"text"},"source":["We may add a new column which computes a function on several of the other columns (you could use this to add new, exotic features!)."]},{"cell_type":"code","metadata":{"id":"RGbEl2SDQIoe","colab_type":"code","outputId":"dd569f45-2564-43a2-a078-5a79ca6fd64d","executionInfo":{"status":"ok","timestamp":1586102219916,"user_tz":420,"elapsed":1792,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["iris.assign(\n","    sepal_ratio=lambda x: x['sepal width (cm)'] / x['sepal length (cm)']\n",").head()"],"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal length (cm)</th>\n","      <th>sepal width (cm)</th>\n","      <th>petal length (cm)</th>\n","      <th>petal width (cm)</th>\n","      <th>target</th>\n","      <th>sepal_ratio</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.1</td>\n","      <td>3.5</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0.0</td>\n","      <td>0.686275</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.9</td>\n","      <td>3.0</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0.0</td>\n","      <td>0.612245</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.7</td>\n","      <td>3.2</td>\n","      <td>1.3</td>\n","      <td>0.2</td>\n","      <td>0.0</td>\n","      <td>0.680851</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4.6</td>\n","      <td>3.1</td>\n","      <td>1.5</td>\n","      <td>0.2</td>\n","      <td>0.0</td>\n","      <td>0.673913</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5.0</td>\n","      <td>3.6</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0.0</td>\n","      <td>0.720000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   sepal length (cm)  sepal width (cm)  ...  target  sepal_ratio\n","0                5.1               3.5  ...     0.0     0.686275\n","1                4.9               3.0  ...     0.0     0.612245\n","2                4.7               3.2  ...     0.0     0.680851\n","3                4.6               3.1  ...     0.0     0.673913\n","4                5.0               3.6  ...     0.0     0.720000\n","\n","[5 rows x 6 columns]"]},"metadata":{"tags":[]},"execution_count":29}]},{"cell_type":"markdown","metadata":{"id":"zamqj7ynRziH","colab_type":"text"},"source":["We can plot based on columns."]},{"cell_type":"code","metadata":{"id":"j8HdgCklRbhv","colab_type":"code","outputId":"0b664abb-0cc1-4326-da3f-5aaa18a6cdea","executionInfo":{"status":"ok","timestamp":1586102220197,"user_tz":420,"elapsed":2061,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"colab":{"base_uri":"https://localhost:8080/","height":297}},"source":["iris.assign(\n","    sepal_ratio=lambda x: x['sepal width (cm)'] / x['sepal length (cm)'],\n","    petal_ratio=lambda x: x['petal width (cm)'] / x['petal length (cm)']\n",").plot(kind='scatter', x='sepal_ratio', y='petal_ratio')"],"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f103e4a4588>"]},"metadata":{"tags":[]},"execution_count":30},{"output_type":"display_data","data":{"image/png":"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\ngg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"wcp938nVSqYw","colab_type":"text"},"source":["And this is just the tip of the iceberg with what Pandas can do. Next, we'll have you start getting your hands dirty writing code."]},{"cell_type":"markdown","metadata":{"id":"fNTI1I0jSTJf","colab_type":"text"},"source":["# Exercises with Pandas\n","\n","Next, we're going to have you get used to using the syntax introduced above and to reading the Pandas documentation ([found here](https://pandas.pydata.org/pandas-docs/stable/reference/index.html))."]},{"cell_type":"markdown","metadata":{"id":"RkzKclN2S6j6","colab_type":"text"},"source":["### Exercise 1\n","\n","First, load the data found here: [Chipotle data](https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv). You'll want to take a look at the `read_csv` function. What is the separator here?"]},{"cell_type":"code","metadata":{"id":"67nTLspCS3lm","colab_type":"code","colab":{}},"source":["import pandas as pd\n","url = \"https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv\"\n","chipotle = pd.read_csv(url, sep='\\t')\n","# separator is '\\t'"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-oZeb_yQTv-P","colab_type":"text"},"source":["### Exercise 2\n","\n","How many total data points are there? How many total columns?"]},{"cell_type":"code","metadata":{"id":"pFDb2jjMg4J0","colab_type":"code","outputId":"7544471f-a5aa-4083-e776-a795ebc3df06","executionInfo":{"status":"ok","timestamp":1586103001624,"user_tz":420,"elapsed":1445,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# total data points\n","chipotle.count()\n","# answer\n","chipotle.shape"],"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(4622, 5)"]},"metadata":{"tags":[]},"execution_count":38}]},{"cell_type":"code","metadata":{"id":"4JLU2m6KhXVx","colab_type":"code","outputId":"7edb936f-2137-4baa-cb44-b363184090e4","executionInfo":{"status":"ok","timestamp":1586102220644,"user_tz":420,"elapsed":2482,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# total number of columns\n","len(chipotle.columns)"],"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5"]},"metadata":{"tags":[]},"execution_count":33}]},{"cell_type":"code","metadata":{"id":"tpov5HFaUdv9","colab_type":"code","colab":{}},"source":["# Add code here"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Qp8d9lKnUd5Z","colab_type":"text"},"source":["### Exercise 3\n","\n","What item was ordered the most? How many were ordered?"]},{"cell_type":"code","metadata":{"id":"_YzJbES_iBPT","colab_type":"code","outputId":"84dbdc90-8231-4d88-97d2-cb4f5a9a681a","executionInfo":{"status":"ok","timestamp":1586102220645,"user_tz":420,"elapsed":2462,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["chipotle['item_name'].value_counts().idxmax()"],"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Chicken Bowl'"]},"metadata":{"tags":[]},"execution_count":35}]},{"cell_type":"code","metadata":{"id":"dvOrG621jHcB","colab_type":"code","outputId":"863d3d19-98a1-4468-ecac-73b4b987b102","executionInfo":{"status":"ok","timestamp":1586102220645,"user_tz":420,"elapsed":2452,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["len(chipotle[chipotle['item_name'] == chipotle['item_name'].value_counts().idxmax()])"],"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["726"]},"metadata":{"tags":[]},"execution_count":36}]},{"cell_type":"code","metadata":{"id":"mcuJlc5pHk-4","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":390},"outputId":"12aff04c-da99-442a-c33e-0061aade3f00","executionInfo":{"status":"ok","timestamp":1586103255107,"user_tz":420,"elapsed":683,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}}},"source":["# better solution - groupby: groups everything together that has a particular value\n","c = chipotle.groupby('item_name').sum()\n","c = c.sort_values('quantity', ascending=False)\n","c.head(10)"],"execution_count":41,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>order_id</th>\n","      <th>quantity</th>\n","    </tr>\n","    <tr>\n","      <th>item_name</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Chicken Bowl</th>\n","      <td>713926</td>\n","      <td>761</td>\n","    </tr>\n","    <tr>\n","      <th>Chicken Burrito</th>\n","      <td>497303</td>\n","      <td>591</td>\n","    </tr>\n","    <tr>\n","      <th>Chips and Guacamole</th>\n","      <td>449959</td>\n","      <td>506</td>\n","    </tr>\n","    <tr>\n","      <th>Steak Burrito</th>\n","      <td>328437</td>\n","      <td>386</td>\n","    </tr>\n","    <tr>\n","      <th>Canned Soft Drink</th>\n","      <td>304753</td>\n","      <td>351</td>\n","    </tr>\n","    <tr>\n","      <th>Chips</th>\n","      <td>208004</td>\n","      <td>230</td>\n","    </tr>\n","    <tr>\n","      <th>Steak Bowl</th>\n","      <td>193752</td>\n","      <td>221</td>\n","    </tr>\n","    <tr>\n","      <th>Bottled Water</th>\n","      <td>175944</td>\n","      <td>211</td>\n","    </tr>\n","    <tr>\n","      <th>Chips and Fresh Tomato Salsa</th>\n","      <td>100419</td>\n","      <td>130</td>\n","    </tr>\n","    <tr>\n","      <th>Canned Soda</th>\n","      <td>76396</td>\n","      <td>126</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                              order_id  quantity\n","item_name                                       \n","Chicken Bowl                    713926       761\n","Chicken Burrito                 497303       591\n","Chips and Guacamole             449959       506\n","Steak Burrito                   328437       386\n","Canned Soft Drink               304753       351\n","Chips                           208004       230\n","Steak Bowl                      193752       221\n","Bottled Water                   175944       211\n","Chips and Fresh Tomato Salsa    100419       130\n","Canned Soda                      76396       126"]},"metadata":{"tags":[]},"execution_count":41}]},{"cell_type":"code","metadata":{"id":"h5yUWoy-WFMc","colab_type":"code","colab":{}},"source":["# Add code here"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Z272JoaHWFz-","colab_type":"text"},"source":["### Exercise 4\n","\n","How much revenue did the purchases in the dataset yield for Chipotle?"]},{"cell_type":"code","metadata":{"id":"-TKh7zY6aF0W","colab_type":"code","outputId":"7c0f7b5d-4122-4696-e657-aa10910b0ab8","executionInfo":{"status":"ok","timestamp":1586103452488,"user_tz":420,"elapsed":736,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# chipotle.sum(chipotle['item_price'])\n","# working solution - create a new list with item_prices without the dollar sign\n","prices = chipotle.item_price.apply(lambda x : float(x[1:]))\n","rev = (chipotle['quantity'] * prices).sum()\n","print(rev)"],"execution_count":45,"outputs":[{"output_type":"stream","text":["39237.02\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"r2D1aAKpWdnO","colab_type":"code","outputId":"fb905ffe-5190-41b1-9885-2e943d2555eb","executionInfo":{"status":"ok","timestamp":1560813353993,"user_tz":420,"elapsed":283,"user":{"displayName":"Nitya Mani","photoUrl":"","userId":"17675676952697240282"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# Add code here"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Total Revenue: $39237.02\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"MSNWWwv5WeM0","colab_type":"text"},"source":["### Exercise 5\n","\n","What was the most expensive order? What about the most expensive item? Repeat these questions for the least expensive order and least expensive item."]},{"cell_type":"code","metadata":{"id":"-Zf_FUBPIbGn","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":204},"outputId":"eb372d20-7549-4f39-9a8e-8e65959d832b","executionInfo":{"status":"ok","timestamp":1586103566740,"user_tz":420,"elapsed":386,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}}},"source":["chipotle['prices'] = prices\n","chipotle['total_cost'] = chipotle['prices'] * chipotle['quantity']\n","chipotle.head()"],"execution_count":48,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>order_id</th>\n","      <th>quantity</th>\n","      <th>item_name</th>\n","      <th>choice_description</th>\n","      <th>item_price</th>\n","      <th>prices</th>\n","      <th>total_cost</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Chips and Fresh Tomato Salsa</td>\n","      <td>NaN</td>\n","      <td>$2.39</td>\n","      <td>2.39</td>\n","      <td>2.39</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Izze</td>\n","      <td>[Clementine]</td>\n","      <td>$3.39</td>\n","      <td>3.39</td>\n","      <td>3.39</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Nantucket Nectar</td>\n","      <td>[Apple]</td>\n","      <td>$3.39</td>\n","      <td>3.39</td>\n","      <td>3.39</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Chips and Tomatillo-Green Chili Salsa</td>\n","      <td>NaN</td>\n","      <td>$2.39</td>\n","      <td>2.39</td>\n","      <td>2.39</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>Chicken Bowl</td>\n","      <td>[Tomatillo-Red Chili Salsa (Hot), [Black Beans...</td>\n","      <td>$16.98</td>\n","      <td>16.98</td>\n","      <td>33.96</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   order_id  quantity  ... prices total_cost\n","0         1         1  ...   2.39       2.39\n","1         1         1  ...   3.39       3.39\n","2         1         1  ...   3.39       3.39\n","3         1         1  ...   2.39       2.39\n","4         2         2  ...  16.98      33.96\n","\n","[5 rows x 7 columns]"]},"metadata":{"tags":[]},"execution_count":48}]},{"cell_type":"code","metadata":{"id":"nNcbT6CxW-x5","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":235},"outputId":"637c2e48-d8b9-4c08-ce00-8dc4be619870","executionInfo":{"status":"ok","timestamp":1586103601155,"user_tz":420,"elapsed":797,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}}},"source":["# most expensive order\n","c = chipotle.groupby('order_id').sum()\n","c = c.sort_values('total_cost', ascending=False)\n","c.head()"],"execution_count":49,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>quantity</th>\n","      <th>prices</th>\n","      <th>total_cost</th>\n","    </tr>\n","    <tr>\n","      <th>order_id</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1443</th>\n","      <td>35</td>\n","      <td>160.74</td>\n","      <td>1074.24</td>\n","    </tr>\n","    <tr>\n","      <th>511</th>\n","      <td>17</td>\n","      <td>104.59</td>\n","      <td>315.29</td>\n","    </tr>\n","    <tr>\n","      <th>1559</th>\n","      <td>16</td>\n","      <td>82.44</td>\n","      <td>246.00</td>\n","    </tr>\n","    <tr>\n","      <th>1660</th>\n","      <td>19</td>\n","      <td>70.25</td>\n","      <td>222.75</td>\n","    </tr>\n","    <tr>\n","      <th>926</th>\n","      <td>23</td>\n","      <td>205.25</td>\n","      <td>205.25</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["          quantity  prices  total_cost\n","order_id                              \n","1443            35  160.74     1074.24\n","511             17  104.59      315.29\n","1559            16   82.44      246.00\n","1660            19   70.25      222.75\n","926             23  205.25      205.25"]},"metadata":{"tags":[]},"execution_count":49}]},{"cell_type":"code","metadata":{"id":"3XxTxUQRJIj6","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":204},"outputId":"341876af-9274-4fef-c336-4e0e3baf5d0f","executionInfo":{"status":"ok","timestamp":1586103725493,"user_tz":420,"elapsed":761,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}}},"source":["# most expensive item\n","t['per_item_cost'] = t['prices'] / t['quantity']\n","t = chipotle.sort_values('prices', ascending=False)\n","t.head()"],"execution_count":52,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>order_id</th>\n","      <th>quantity</th>\n","      <th>item_name</th>\n","      <th>choice_description</th>\n","      <th>item_price</th>\n","      <th>prices</th>\n","      <th>total_cost</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>3598</th>\n","      <td>1443</td>\n","      <td>15</td>\n","      <td>Chips and Fresh Tomato Salsa</td>\n","      <td>NaN</td>\n","      <td>$44.25</td>\n","      <td>44.25</td>\n","      <td>663.75</td>\n","    </tr>\n","    <tr>\n","      <th>3480</th>\n","      <td>1398</td>\n","      <td>3</td>\n","      <td>Carnitas Bowl</td>\n","      <td>[Roasted Chili Corn Salsa, [Fajita Vegetables,...</td>\n","      <td>$35.25</td>\n","      <td>35.25</td>\n","      <td>105.75</td>\n","    </tr>\n","    <tr>\n","      <th>1254</th>\n","      <td>511</td>\n","      <td>4</td>\n","      <td>Chicken Burrito</td>\n","      <td>[Fresh Tomato Salsa, [Fajita Vegetables, Rice,...</td>\n","      <td>$35.00</td>\n","      <td>35.00</td>\n","      <td>140.00</td>\n","    </tr>\n","    <tr>\n","      <th>3602</th>\n","      <td>1443</td>\n","      <td>4</td>\n","      <td>Chicken Burrito</td>\n","      <td>[Fresh Tomato Salsa, [Rice, Black Beans, Chees...</td>\n","      <td>$35.00</td>\n","      <td>35.00</td>\n","      <td>140.00</td>\n","    </tr>\n","    <tr>\n","      <th>3601</th>\n","      <td>1443</td>\n","      <td>3</td>\n","      <td>Veggie Burrito</td>\n","      <td>[Fresh Tomato Salsa, [Fajita Vegetables, Rice,...</td>\n","      <td>$33.75</td>\n","      <td>33.75</td>\n","      <td>101.25</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["      order_id  quantity  ... prices total_cost\n","3598      1443        15  ...  44.25     663.75\n","3480      1398         3  ...  35.25     105.75\n","1254       511         4  ...  35.00     140.00\n","3602      1443         4  ...  35.00     140.00\n","3601      1443         3  ...  33.75     101.25\n","\n","[5 rows x 7 columns]"]},"metadata":{"tags":[]},"execution_count":52}]},{"cell_type":"code","metadata":{"id":"LEuuQuDSJSx_","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}