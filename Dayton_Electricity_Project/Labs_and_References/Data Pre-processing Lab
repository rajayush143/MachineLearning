{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.2"},"colab":{"name":"Data Pre-processing Lab","provenance":[{"file_id":"1QggBs-WPO54JnjqqHgMCKxTLacJKYf00","timestamp":1592156563987},{"file_id":"1JXFNc8YfxfNr2BuhgDl1f5uhAsFuMLRU","timestamp":1591544790920},{"file_id":"https://github.com/JEddy92/TimeSeries_Seq2Seq/blob/master/notebooks/TS_Seq2Seq_Conv_Intro.ipynb","timestamp":1591476645766}],"collapsed_sections":[]},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"f3G30sS1b7q3","colab_type":"code","cellView":"both","colab":{"base_uri":"https://localhost:8080/","height":68},"executionInfo":{"status":"ok","timestamp":1592754874644,"user_tz":420,"elapsed":2085,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"outputId":"734a8c7e-20cf-4ef9-9550-2e55d092f156"},"source":["%matplotlib inline\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import pandas as pd\n","import os\n","#from glob import glob\n","import seaborn as sns\n","#from PIL import Image\n","np.random.seed(123)\n","from sklearn.preprocessing import label_binarize\n","from sklearn.metrics import confusion_matrix\n","from sklearn.model_selection import train_test_split\n","import itertools\n","\n","import keras\n","from keras.utils.np_utils import to_categorical # used for converting labels to one-hot-encoding\n","from keras.models import Sequential\n","from keras.layers import Dense\n","from keras import backend as K\n","from keras.optimizers import Adam\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n","Using TensorFlow backend.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"W7oYD45mdtXU","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":51},"executionInfo":{"status":"ok","timestamp":1592754890847,"user_tz":420,"elapsed":18181,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"outputId":"89db2193-8265-43c4-91a5-d5d09948e10f"},"source":["from getpass import getpass\n","user = getpass('Kaggle Username: ')\n","key = getpass('Kaggle API key: ')\n","# You need to provide your Kaggle username and API key \n","import os\n","if '.kaggle' not in os.listdir('/root'):\n","    !mkdir ~/.kaggle\n","!touch /root/.kaggle/kaggle.json\n","!chmod 666 /root/.kaggle/kaggle.json\n","with open('/root/.kaggle/kaggle.json', 'w') as f:\n","    f.write('{\"username\":\"%s\",\"key\":\"%s\"}' % (user, key))\n","!chmod 600 /root/.kaggle/kaggle.json"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Kaggle Username: ··········\n","Kaggle API key: ··········\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"NbmNt2UhZiGq","colab_type":"text"},"source":["# Exploring Data\n","\n","We will walk through the steps to load + preprocess + do an exploratory analysis of the Flaredown dataset."]},{"cell_type":"markdown","metadata":{"id":"lRnkR7vi5LcK","colab_type":"text"},"source":["Flaredown is an app that helps patients of chronic autoimmune and invisible illnesses improve their symptoms by avoiding triggers and evaluating their treatments. Each day, patients track their symptom severity, treatments and doses, and any potential environmental triggers (foods, stress, allergens, etc) they encounter.\n","\n","We will download the dataset from [Kaggle](https://www.kaggle.com/flaredown/flaredown-autoimmune-symptom-tracker/data). \n","\n","This dataset is messy like real world datasets are and will require a lot of preprocessing and thoughtful exploration before attempting to use it for a machine learning task"]},{"cell_type":"code","metadata":{"id":"4qDhs9yJ5f5F","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1592682269758,"user_tz":420,"elapsed":8839,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"outputId":"80c94186-8e9b-406c-f832-0c9bc4e9f2f4"},"source":["!mkdir -p flaredown_data\n","!kaggle datasets download -d flaredown/flaredown-autoimmune-symptom-tracker -p flaredown_data"],"execution_count":null,"outputs":[{"output_type":"stream","text":["flaredown-autoimmune-symptom-tracker.zip: Skipping, found more recently modified local copy (use --force to force download)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"LSjHM0jz5oer","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":85},"executionInfo":{"status":"ok","timestamp":1592682272913,"user_tz":420,"elapsed":11206,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"outputId":"87653d0f-23d2-4f52-ccd9-7ffa2c384170"},"source":["!kaggle datasets files flaredown/flaredown-autoimmune-symptom-tracker"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Warning: Looks like you're using an outdated API Version, please consider updating (server 1.5.6 / client 1.5.4)\n","name            size  creationDate         \n","-------------  -----  -------------------  \n","fd-export.csv  285MB  2018-07-23 13:43:33  \n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vImEVF2w6Ur-","colab_type":"code","colab":{}},"source":["!unzip -o -q flaredown_data/flaredown-autoimmune-symptom-tracker.zip"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yZKQXtbh5xfT","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":238},"executionInfo":{"status":"ok","timestamp":1592682279840,"user_tz":420,"elapsed":16872,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"outputId":"3106761e-e8ea-46d9-86e7-2e29732642fc"},"source":["fd_df = pd.read_csv('fd-export.csv')\n","fd_df.head()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/IPython/core/interactiveshell.py:2718: DtypeWarning: Columns (5) have mixed types.Specify dtype option on import or set low_memory=False.\n","  interactivity=interactivity, compiler=compiler, result=result)\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user_id</th>\n","      <th>age</th>\n","      <th>sex</th>\n","      <th>country</th>\n","      <th>checkin_date</th>\n","      <th>trackable_id</th>\n","      <th>trackable_type</th>\n","      <th>trackable_name</th>\n","      <th>trackable_value</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>QEVuQwEABlEzkh7fsBBjEe26RyIVcg==</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>2015-11-26</td>\n","      <td>1069</td>\n","      <td>Condition</td>\n","      <td>Ulcerative colitis</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>QEVuQwEAWRNGnuTRqXG2996KSkTIEw==</td>\n","      <td>31.0</td>\n","      <td>male</td>\n","      <td>US</td>\n","      <td>2015-11-26</td>\n","      <td>1069</td>\n","      <td>Condition</td>\n","      <td>Ulcerative colitis</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>QEVuQwEA+WkNxtp/qkHvN2YmTBBDqg==</td>\n","      <td>1.0</td>\n","      <td>female</td>\n","      <td>CA</td>\n","      <td>2017-04-28</td>\n","      <td>3168</td>\n","      <td>Condition</td>\n","      <td>pain in left upper arm felt like i was getting...</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>QEVuQwEA+WkNxtp/qkHvN2YmTBBDqg==</td>\n","      <td>1.0</td>\n","      <td>female</td>\n","      <td>CA</td>\n","      <td>2017-04-28</td>\n","      <td>3169</td>\n","      <td>Condition</td>\n","      <td>hip pain when gettin up</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>QEVuQwEA+WkNxtp/qkHvN2YmTBBDqg==</td>\n","      <td>1.0</td>\n","      <td>female</td>\n","      <td>CA</td>\n","      <td>2017-04-28</td>\n","      <td>3170</td>\n","      <td>Condition</td>\n","      <td>pain in hand joints</td>\n","      <td>4</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                            user_id  ...  trackable_value\n","0  QEVuQwEABlEzkh7fsBBjEe26RyIVcg==  ...                0\n","1  QEVuQwEAWRNGnuTRqXG2996KSkTIEw==  ...                0\n","2  QEVuQwEA+WkNxtp/qkHvN2YmTBBDqg==  ...                4\n","3  QEVuQwEA+WkNxtp/qkHvN2YmTBBDqg==  ...                3\n","4  QEVuQwEA+WkNxtp/qkHvN2YmTBBDqg==  ...                4\n","\n","[5 rows x 9 columns]"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"markdown","metadata":{"id":"q7GXi_v6CTzi","colab_type":"text"},"source":["###Task A: User IDs\n","\n","As you can see, the user_id's are rather long and compicated alphanumeric strings with special characters. Create a 'simple_id' column that just assigns each distinct user an integer ID."]},{"cell_type":"code","metadata":{"id":"1wLn0eeNFlXZ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1592682279848,"user_tz":420,"elapsed":14830,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"outputId":"a5d2e587-bd93-4dfc-ad60-bb0208ebbadc"},"source":["fd_df['simple_id'] = pd.factorize(fd_df.user_id)[0]\n","fd_df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user_id</th>\n","      <th>age</th>\n","      <th>sex</th>\n","      <th>country</th>\n","      <th>checkin_date</th>\n","      <th>trackable_id</th>\n","      <th>trackable_type</th>\n","      <th>trackable_name</th>\n","      <th>trackable_value</th>\n","      <th>simple_id</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>QEVuQwEABlEzkh7fsBBjEe26RyIVcg==</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>2015-11-26</td>\n","      <td>1069</td>\n","      <td>Condition</td>\n","      <td>Ulcerative colitis</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>QEVuQwEAWRNGnuTRqXG2996KSkTIEw==</td>\n","      <td>31.0</td>\n","      <td>male</td>\n","      <td>US</td>\n","      <td>2015-11-26</td>\n","      <td>1069</td>\n","      <td>Condition</td>\n","      <td>Ulcerative colitis</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>QEVuQwEA+WkNxtp/qkHvN2YmTBBDqg==</td>\n","      <td>1.0</td>\n","      <td>female</td>\n","      <td>CA</td>\n","      <td>2017-04-28</td>\n","      <td>3168</td>\n","      <td>Condition</td>\n","      <td>pain in left upper arm felt like i was getting...</td>\n","      <td>4</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>QEVuQwEA+WkNxtp/qkHvN2YmTBBDqg==</td>\n","      <td>1.0</td>\n","      <td>female</td>\n","      <td>CA</td>\n","      <td>2017-04-28</td>\n","      <td>3169</td>\n","      <td>Condition</td>\n","      <td>hip pain when gettin up</td>\n","      <td>3</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>QEVuQwEA+WkNxtp/qkHvN2YmTBBDqg==</td>\n","      <td>1.0</td>\n","      <td>female</td>\n","      <td>CA</td>\n","      <td>2017-04-28</td>\n","      <td>3170</td>\n","      <td>Condition</td>\n","      <td>pain in hand joints</td>\n","      <td>4</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                            user_id   age  ... trackable_value simple_id\n","0  QEVuQwEABlEzkh7fsBBjEe26RyIVcg==   NaN  ...               0         0\n","1  QEVuQwEAWRNGnuTRqXG2996KSkTIEw==  31.0  ...               0         1\n","2  QEVuQwEA+WkNxtp/qkHvN2YmTBBDqg==   1.0  ...               4         2\n","3  QEVuQwEA+WkNxtp/qkHvN2YmTBBDqg==   1.0  ...               3         2\n","4  QEVuQwEA+WkNxtp/qkHvN2YmTBBDqg==   1.0  ...               4         2\n","\n","[5 rows x 10 columns]"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"markdown","metadata":{"id":"_jti0X0I9WCK","colab_type":"text"},"source":["### Task B: Age column\n","\n","Preprocess the dataframe to eliminate patients where the 'age' column does not contain a sensible value + to make sure the age is a meaningful quantity in years. We've included some starting exploration to help give you some clues as to what might be wrong."]},{"cell_type":"code","metadata":{"id":"eUl76DfL833B","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":170},"executionInfo":{"status":"ok","timestamp":1592682279851,"user_tz":420,"elapsed":13935,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"outputId":"3f53582f-065c-4d21-9ad5-66c7dc61f3c0"},"source":["fd_df['age'].describe()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["count    3.270971e+06\n","mean     3.287049e+01\n","std      2.197340e+02\n","min     -1.966930e+05\n","25%      2.400000e+01\n","50%      3.200000e+01\n","75%      4.000000e+01\n","max      2.017000e+03\n","Name: age, dtype: float64"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"ExKIOFqB9eDQ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":419},"executionInfo":{"status":"ok","timestamp":1592682279854,"user_tz":420,"elapsed":12194,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"outputId":"f7057417-5008-4d91-eb2c-b62d04e79b0f"},"source":["fd_df[fd_df['age'] < 0]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user_id</th>\n","      <th>age</th>\n","      <th>sex</th>\n","      <th>country</th>\n","      <th>checkin_date</th>\n","      <th>trackable_id</th>\n","      <th>trackable_type</th>\n","      <th>trackable_name</th>\n","      <th>trackable_value</th>\n","      <th>simple_id</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>44682</th>\n","      <td>QEVuQwEAL0wmX+OCpgHS+d3F3ftvgg==</td>\n","      <td>-45.0</td>\n","      <td>female</td>\n","      <td>US</td>\n","      <td>2016-07-17</td>\n","      <td>459</td>\n","      <td>Condition</td>\n","      <td>Hashimoto's disease</td>\n","      <td>4</td>\n","      <td>494</td>\n","    </tr>\n","    <tr>\n","      <th>44683</th>\n","      <td>QEVuQwEAL0wmX+OCpgHS+d3F3ftvgg==</td>\n","      <td>-45.0</td>\n","      <td>female</td>\n","      <td>US</td>\n","      <td>2016-07-17</td>\n","      <td>187</td>\n","      <td>Condition</td>\n","      <td>Celiac disease</td>\n","      <td>3</td>\n","      <td>494</td>\n","    </tr>\n","    <tr>\n","      <th>44684</th>\n","      <td>QEVuQwEAL0wmX+OCpgHS+d3F3ftvgg==</td>\n","      <td>-45.0</td>\n","      <td>female</td>\n","      <td>US</td>\n","      <td>2016-07-17</td>\n","      <td>242</td>\n","      <td>Symptom</td>\n","      <td>Fatigue</td>\n","      <td>4</td>\n","      <td>494</td>\n","    </tr>\n","    <tr>\n","      <th>44685</th>\n","      <td>QEVuQwEAL0wmX+OCpgHS+d3F3ftvgg==</td>\n","      <td>-45.0</td>\n","      <td>female</td>\n","      <td>US</td>\n","      <td>2016-07-17</td>\n","      <td>121</td>\n","      <td>Symptom</td>\n","      <td>Joint pain</td>\n","      <td>4</td>\n","      <td>494</td>\n","    </tr>\n","    <tr>\n","      <th>44686</th>\n","      <td>QEVuQwEAL0wmX+OCpgHS+d3F3ftvgg==</td>\n","      <td>-45.0</td>\n","      <td>female</td>\n","      <td>US</td>\n","      <td>2016-07-17</td>\n","      <td>278</td>\n","      <td>Symptom</td>\n","      <td>Muscle ache</td>\n","      <td>4</td>\n","      <td>494</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1256531</th>\n","      <td>QEVuQwEA2TKGY3hHlLe/DwfK0Fnucg==</td>\n","      <td>-1.0</td>\n","      <td>female</td>\n","      <td>US</td>\n","      <td>2017-10-12</td>\n","      <td>1</td>\n","      <td>Symptom</td>\n","      <td>Abdominal pain</td>\n","      <td>1</td>\n","      <td>12726</td>\n","    </tr>\n","    <tr>\n","      <th>1256532</th>\n","      <td>QEVuQwEA2TKGY3hHlLe/DwfK0Fnucg==</td>\n","      <td>-1.0</td>\n","      <td>female</td>\n","      <td>US</td>\n","      <td>2017-10-12</td>\n","      <td>259</td>\n","      <td>Symptom</td>\n","      <td>lightheadedness</td>\n","      <td>2</td>\n","      <td>12726</td>\n","    </tr>\n","    <tr>\n","      <th>1256533</th>\n","      <td>QEVuQwEA2TKGY3hHlLe/DwfK0Fnucg==</td>\n","      <td>-1.0</td>\n","      <td>female</td>\n","      <td>US</td>\n","      <td>2017-10-12</td>\n","      <td>257</td>\n","      <td>Symptom</td>\n","      <td>Migraine</td>\n","      <td>4</td>\n","      <td>12726</td>\n","    </tr>\n","    <tr>\n","      <th>1256534</th>\n","      <td>QEVuQwEA2TKGY3hHlLe/DwfK0Fnucg==</td>\n","      <td>-1.0</td>\n","      <td>female</td>\n","      <td>US</td>\n","      <td>2017-10-12</td>\n","      <td>1</td>\n","      <td>Tag</td>\n","      <td>tired</td>\n","      <td>NaN</td>\n","      <td>12726</td>\n","    </tr>\n","    <tr>\n","      <th>1256535</th>\n","      <td>QEVuQwEA2TKGY3hHlLe/DwfK0Fnucg==</td>\n","      <td>-1.0</td>\n","      <td>female</td>\n","      <td>US</td>\n","      <td>2017-10-12</td>\n","      <td>9234</td>\n","      <td>Tag</td>\n","      <td>did not sleep well</td>\n","      <td>NaN</td>\n","      <td>12726</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>69 rows × 10 columns</p>\n","</div>"],"text/plain":["                                  user_id   age  ... trackable_value simple_id\n","44682    QEVuQwEAL0wmX+OCpgHS+d3F3ftvgg== -45.0  ...               4       494\n","44683    QEVuQwEAL0wmX+OCpgHS+d3F3ftvgg== -45.0  ...               3       494\n","44684    QEVuQwEAL0wmX+OCpgHS+d3F3ftvgg== -45.0  ...               4       494\n","44685    QEVuQwEAL0wmX+OCpgHS+d3F3ftvgg== -45.0  ...               4       494\n","44686    QEVuQwEAL0wmX+OCpgHS+d3F3ftvgg== -45.0  ...               4       494\n","...                                   ...   ...  ...             ...       ...\n","1256531  QEVuQwEA2TKGY3hHlLe/DwfK0Fnucg==  -1.0  ...               1     12726\n","1256532  QEVuQwEA2TKGY3hHlLe/DwfK0Fnucg==  -1.0  ...               2     12726\n","1256533  QEVuQwEA2TKGY3hHlLe/DwfK0Fnucg==  -1.0  ...               4     12726\n","1256534  QEVuQwEA2TKGY3hHlLe/DwfK0Fnucg==  -1.0  ...             NaN     12726\n","1256535  QEVuQwEA2TKGY3hHlLe/DwfK0Fnucg==  -1.0  ...             NaN     12726\n","\n","[69 rows x 10 columns]"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"id":"v9DUthVH-KTk","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":170},"executionInfo":{"status":"ok","timestamp":1592682280703,"user_tz":420,"elapsed":12102,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"outputId":"0f387287-0c01-4ecb-86c7-a7df0d33cdf3"},"source":["fd_df = fd_df[fd_df['age'] > 0]\n","fd_df = fd_df[fd_df['age'] < 100]\n","fd_df['age'].describe()\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["count    3.251220e+06\n","mean     3.309047e+01\n","std      1.160028e+01\n","min      1.000000e+00\n","25%      2.500000e+01\n","50%      3.200000e+01\n","75%      4.000000e+01\n","max      9.800000e+01\n","Name: age, dtype: float64"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"markdown","metadata":{"id":"T9wdllq1-R0H","colab_type":"text"},"source":["###Task C: Conditions\n","\n","We'd like to restrict the data to patients that contain a smaller list of diagnosable conditions (the 20 most frequently occuring ones as shown below). You will need to use pandas and apply to the user ID column and the trackable_type and trackable_name columns to get these results. We've included some sample function calls and visualization to get you started below."]},{"cell_type":"code","metadata":{"id":"7b2nFwGN_m_d","colab_type":"code","colab":{}},"source":["conditions = fd_df[fd_df['trackable_type'] == 'Condition']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k-Ts0jjQ_wIZ","colab_type":"code","colab":{}},"source":["distinct_conds = conditions['trackable_name'].unique()[0:50]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"l8jqXcJJAFJg","colab_type":"code","colab":{}},"source":["top_conds = conditions['trackable_name'].value_counts().sort_values(ascending=False).head(n=20).to_dict()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"19zzdYd0At-J","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":54},"executionInfo":{"status":"ok","timestamp":1592682281055,"user_tz":420,"elapsed":8825,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"outputId":"ce422064-517a-42f6-9dea-97f3d307746f"},"source":["top_conds.keys()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["dict_keys(['Fibromyalgia', 'Depression', 'Anxiety', 'Chronic fatigue syndrome', 'Migraine', 'IBS', 'Endometriosis', 'Ehlers-Danlos syndrome', 'Asthma', 'Irritable bowel syndrome', 'Fatigue', 'Generalized anxiety disorder', 'Headaches', 'Chronic Migraines', 'joint pain', 'POTS', 'Chronic Pain', 'Allergies', 'Ulcerative colitis', 'Dysautonomia'])"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"id":"JP1F051wAx88","colab_type":"code","colab":{}},"source":["conditions = conditions[conditions['trackable_name'].isin(top_conds.keys())]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"opF_yw198F31","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":575},"executionInfo":{"status":"ok","timestamp":1592682281536,"user_tz":420,"elapsed":8332,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"outputId":"b69d907c-a701-45c7-c959-dbffd56aeb5a"},"source":["plt.figure(figsize=(20,20))\n","chart = sns.catplot(x=\"trackable_name\", kind=\"count\", data=conditions,height=6,aspect=2);\n","chart.set_xticklabels(rotation=45,horizontalalignment='right')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<seaborn.axisgrid.FacetGrid at 0x7f18fc91efd0>"]},"metadata":{"tags":[]},"execution_count":16},{"output_type":"display_data","data":{"text/plain":["<Figure size 1440x1440 with 0 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 864x432 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"O15I5US7CKYK","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":419},"executionInfo":{"status":"ok","timestamp":1592682282973,"user_tz":420,"elapsed":7992,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"outputId":"94c2617a-7b5a-45ef-be85-2202d9ab96bb"},"source":["fd_df[fd_df['trackable_type'] == 'Condition'] = conditions\n","fd_df[fd_df['trackable_type'] == 'Symptom']"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user_id</th>\n","      <th>age</th>\n","      <th>sex</th>\n","      <th>country</th>\n","      <th>checkin_date</th>\n","      <th>trackable_id</th>\n","      <th>trackable_type</th>\n","      <th>trackable_name</th>\n","      <th>trackable_value</th>\n","      <th>simple_id</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>15</th>\n","      <td>QEVuQwEA+WkNxtp/qkHvN2YmTBBDqg==</td>\n","      <td>1.0</td>\n","      <td>female</td>\n","      <td>CA</td>\n","      <td>2017-04-28</td>\n","      <td>123</td>\n","      <td>Symptom</td>\n","      <td>Joint stiffness</td>\n","      <td>3</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>71</th>\n","      <td>QEVuQwEAt9BT8darNBUVXse2TEL3SA==</td>\n","      <td>30.0</td>\n","      <td>female</td>\n","      <td>US</td>\n","      <td>2015-07-17</td>\n","      <td>245</td>\n","      <td>Symptom</td>\n","      <td>mania</td>\n","      <td>0</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>72</th>\n","      <td>QEVuQwEAt9BT8darNBUVXse2TEL3SA==</td>\n","      <td>30.0</td>\n","      <td>female</td>\n","      <td>US</td>\n","      <td>2015-07-17</td>\n","      <td>54</td>\n","      <td>Symptom</td>\n","      <td>Depression</td>\n","      <td>0</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>73</th>\n","      <td>QEVuQwEAt9BT8darNBUVXse2TEL3SA==</td>\n","      <td>30.0</td>\n","      <td>female</td>\n","      <td>US</td>\n","      <td>2015-07-17</td>\n","      <td>246</td>\n","      <td>Symptom</td>\n","      <td>intrusive thoughts</td>\n","      <td>0</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>74</th>\n","      <td>QEVuQwEAt9BT8darNBUVXse2TEL3SA==</td>\n","      <td>30.0</td>\n","      <td>female</td>\n","      <td>US</td>\n","      <td>2015-07-17</td>\n","      <td>197</td>\n","      <td>Symptom</td>\n","      <td>Stomach cramps</td>\n","      <td>2</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>3487600</th>\n","      <td>QEVuQwEAk8TstQqKvjz8p2J6FAqOcA==</td>\n","      <td>24.0</td>\n","      <td>male</td>\n","      <td>GB</td>\n","      <td>2018-07-12</td>\n","      <td>2564</td>\n","      <td>Symptom</td>\n","      <td>Frequent bowel movements</td>\n","      <td>2</td>\n","      <td>22069.0</td>\n","    </tr>\n","    <tr>\n","      <th>3487616</th>\n","      <td>QEVuQwEAUuGkJbPOl/k3sOZp+tkH8Q==</td>\n","      <td>28.0</td>\n","      <td>female</td>\n","      <td>US</td>\n","      <td>2018-07-12</td>\n","      <td>273</td>\n","      <td>Symptom</td>\n","      <td>hives</td>\n","      <td>4</td>\n","      <td>22070.0</td>\n","    </tr>\n","    <tr>\n","      <th>3487617</th>\n","      <td>QEVuQwEAUuGkJbPOl/k3sOZp+tkH8Q==</td>\n","      <td>28.0</td>\n","      <td>female</td>\n","      <td>US</td>\n","      <td>2018-07-12</td>\n","      <td>829</td>\n","      <td>Symptom</td>\n","      <td>Excessive Daytime Sleepiness</td>\n","      <td>2</td>\n","      <td>22070.0</td>\n","    </tr>\n","    <tr>\n","      <th>3487618</th>\n","      <td>QEVuQwEAUuGkJbPOl/k3sOZp+tkH8Q==</td>\n","      <td>28.0</td>\n","      <td>female</td>\n","      <td>US</td>\n","      <td>2018-07-12</td>\n","      <td>364</td>\n","      <td>Symptom</td>\n","      <td>Headaches</td>\n","      <td>3</td>\n","      <td>22070.0</td>\n","    </tr>\n","    <tr>\n","      <th>3487619</th>\n","      <td>QEVuQwEAUuGkJbPOl/k3sOZp+tkH8Q==</td>\n","      <td>28.0</td>\n","      <td>female</td>\n","      <td>US</td>\n","      <td>2018-07-12</td>\n","      <td>45</td>\n","      <td>Symptom</td>\n","      <td>Constipation</td>\n","      <td>3</td>\n","      <td>22070.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1464952 rows × 10 columns</p>\n","</div>"],"text/plain":["                                  user_id   age  ... trackable_value simple_id\n","15       QEVuQwEA+WkNxtp/qkHvN2YmTBBDqg==   1.0  ...               3       2.0\n","71       QEVuQwEAt9BT8darNBUVXse2TEL3SA==  30.0  ...               0       5.0\n","72       QEVuQwEAt9BT8darNBUVXse2TEL3SA==  30.0  ...               0       5.0\n","73       QEVuQwEAt9BT8darNBUVXse2TEL3SA==  30.0  ...               0       5.0\n","74       QEVuQwEAt9BT8darNBUVXse2TEL3SA==  30.0  ...               2       5.0\n","...                                   ...   ...  ...             ...       ...\n","3487600  QEVuQwEAk8TstQqKvjz8p2J6FAqOcA==  24.0  ...               2   22069.0\n","3487616  QEVuQwEAUuGkJbPOl/k3sOZp+tkH8Q==  28.0  ...               4   22070.0\n","3487617  QEVuQwEAUuGkJbPOl/k3sOZp+tkH8Q==  28.0  ...               2   22070.0\n","3487618  QEVuQwEAUuGkJbPOl/k3sOZp+tkH8Q==  28.0  ...               3   22070.0\n","3487619  QEVuQwEAUuGkJbPOl/k3sOZp+tkH8Q==  28.0  ...               3   22070.0\n","\n","[1464952 rows x 10 columns]"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"code","metadata":{"id":"ISW5avQPeM1l","colab_type":"code","colab":{}},"source":["not_null_name = fd_df[fd_df['trackable_name'].notnull()]\n","fd_df = not_null_name"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NB7Phx7TCrQc","colab_type":"text"},"source":["###Task D: Types\n","\n","Convert all numeric columns to numbers, gracefully handling error values and the date column to a DateTime series.\n","\n","Convert 50-500 most common different symptoms to categorical integer labels and construct a dictionary mapping the string version of a symptom description to its numeric label. You can put the remaining symptoms into an 'other' category or try to get fancy for slight rephrasings of descriptions of the same symptoms.\n","\n","Repeat the same task to preprocess \"Treatment\", \"Tag\", and \"Weather\" entries"]},{"cell_type":"code","metadata":{"id":"zXYMnPb1D3Vv","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":119},"executionInfo":{"status":"ok","timestamp":1592682284872,"user_tz":420,"elapsed":3885,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"outputId":"c8066bd5-e861-4c74-a133-6523621cadb4"},"source":["symptoms = fd_df[fd_df['trackable_type'] == 'Symptom']\n","symptoms['trackable_name'] = symptoms['trackable_name'].map(str.lower)\n","distinct_syms = symptoms['trackable_name'].unique()[0:50]\n","\n","top_symptoms = symptoms['trackable_name'].value_counts().sort_values(ascending=False).head(n=50).to_dict()\n","\n","fd_df[fd_df['trackable_type'] == 'Symptom'] = symptoms\n","\n","# sex, country, trackable_type, trackable_name need to become one-hot (create new columns for each type of those)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"Jvcd_7CeECvp","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1592682284877,"user_tz":420,"elapsed":1731,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"outputId":"8a467ba7-2529-47db-ac46-b7e6eff524bc"},"source":["print(len(distinct_syms))\n","top_syms = symptoms['trackable_name'].value_counts().sort_values(ascending=False).head(n=200).to_dict()\n","# original len(distince_syms) was 11527"],"execution_count":null,"outputs":[{"output_type":"stream","text":["50\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vWZqBezjXRbe","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JEmuo-DoRFJP","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":374},"executionInfo":{"status":"ok","timestamp":1592682285357,"user_tz":420,"elapsed":878,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"outputId":"eeb9e802-cf2b-48c0-f360-d22b00ebd8bc"},"source":["fd_df[fd_df.trackable_type==\"Treatment\"].trackable_name.map(str.lower).value_counts().head(20)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["ibuprofen        8070\n","vitamin d        4949\n","tramadol         4604\n","magnesium        4361\n","paracetamol      4044\n","vitamin d3       4017\n","multivitamin     3869\n","gabapentin       3764\n","amitriptyline    3322\n","prednisone       3277\n","omeprazole       3119\n","cymbalta         2866\n","probiotic        2747\n","zyrtec           2724\n","levothyroxine    2674\n","vitamin c        2533\n","sleep            2530\n","naproxen         2518\n","tylenol          2496\n","plaquenil        2459\n","Name: trackable_name, dtype: int64"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"code","metadata":{"id":"x_gvLbBXcZ2y","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":521},"executionInfo":{"status":"ok","timestamp":1592682288322,"user_tz":420,"elapsed":1190,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"outputId":"81a09590-8377-4184-9595-fc20480c6ba5"},"source":["# making 'sex' one-hot encoding\n","sex_not_null = fd_df[fd_df['sex'].notnull()]\n","fd_df = sex_not_null\n","sex = fd_df['sex']\n","distinct_sexes = sex.unique()\n","for sex in distinct_sexes:\n","  fd_df[sex] = np.zeros(len(fd_df))\n","fd_df[fd_df['sex'] == 'male']"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  import sys\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user_id</th>\n","      <th>age</th>\n","      <th>sex</th>\n","      <th>country</th>\n","      <th>checkin_date</th>\n","      <th>trackable_id</th>\n","      <th>trackable_type</th>\n","      <th>trackable_name</th>\n","      <th>trackable_value</th>\n","      <th>simple_id</th>\n","      <th>male</th>\n","      <th>female</th>\n","      <th>other</th>\n","      <th>doesnt_say</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>QEVuQwEAWRNGnuTRqXG2996KSkTIEw==</td>\n","      <td>31.0</td>\n","      <td>male</td>\n","      <td>US</td>\n","      <td>2015-11-26</td>\n","      <td>1069</td>\n","      <td>Condition</td>\n","      <td>Ulcerative colitis</td>\n","      <td>0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>179</th>\n","      <td>QEVuQwEAGE+cRgOKW7/YPSArqzk5bg==</td>\n","      <td>31.0</td>\n","      <td>male</td>\n","      <td>MO</td>\n","      <td>2015-05-28</td>\n","      <td>350</td>\n","      <td>Condition</td>\n","      <td>Ehlers-Danlos syndrome</td>\n","      <td>0</td>\n","      <td>8.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>180</th>\n","      <td>QEVuQwEAGE+cRgOKW7/YPSArqzk5bg==</td>\n","      <td>31.0</td>\n","      <td>male</td>\n","      <td>MO</td>\n","      <td>2015-05-28</td>\n","      <td>8</td>\n","      <td>Symptom</td>\n","      <td>anxiety</td>\n","      <td>0</td>\n","      <td>8.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>181</th>\n","      <td>QEVuQwEAGE+cRgOKW7/YPSArqzk5bg==</td>\n","      <td>31.0</td>\n","      <td>male</td>\n","      <td>MO</td>\n","      <td>2015-05-28</td>\n","      <td>63</td>\n","      <td>Symptom</td>\n","      <td>dizziness</td>\n","      <td>0</td>\n","      <td>8.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>182</th>\n","      <td>QEVuQwEAGE+cRgOKW7/YPSArqzk5bg==</td>\n","      <td>31.0</td>\n","      <td>male</td>\n","      <td>MO</td>\n","      <td>2015-05-28</td>\n","      <td>253</td>\n","      <td>Symptom</td>\n","      <td>pain</td>\n","      <td>1</td>\n","      <td>8.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>3487611</th>\n","      <td>QEVuQwEAk8TstQqKvjz8p2J6FAqOcA==</td>\n","      <td>24.0</td>\n","      <td>male</td>\n","      <td>GB</td>\n","      <td>2018-07-12</td>\n","      <td>102587</td>\n","      <td>Weather</td>\n","      <td>temperature_min</td>\n","      <td>57.0</td>\n","      <td>22069.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3487612</th>\n","      <td>QEVuQwEAk8TstQqKvjz8p2J6FAqOcA==</td>\n","      <td>24.0</td>\n","      <td>male</td>\n","      <td>GB</td>\n","      <td>2018-07-12</td>\n","      <td>102587</td>\n","      <td>Weather</td>\n","      <td>temperature_max</td>\n","      <td>70.0</td>\n","      <td>22069.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3487613</th>\n","      <td>QEVuQwEAk8TstQqKvjz8p2J6FAqOcA==</td>\n","      <td>24.0</td>\n","      <td>male</td>\n","      <td>GB</td>\n","      <td>2018-07-12</td>\n","      <td>102587</td>\n","      <td>Weather</td>\n","      <td>precip_intensity</td>\n","      <td>0.0001</td>\n","      <td>22069.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3487614</th>\n","      <td>QEVuQwEAk8TstQqKvjz8p2J6FAqOcA==</td>\n","      <td>24.0</td>\n","      <td>male</td>\n","      <td>GB</td>\n","      <td>2018-07-12</td>\n","      <td>102587</td>\n","      <td>Weather</td>\n","      <td>pressure</td>\n","      <td>1023.0</td>\n","      <td>22069.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3487615</th>\n","      <td>QEVuQwEAk8TstQqKvjz8p2J6FAqOcA==</td>\n","      <td>24.0</td>\n","      <td>male</td>\n","      <td>GB</td>\n","      <td>2018-07-12</td>\n","      <td>102587</td>\n","      <td>Weather</td>\n","      <td>humidity</td>\n","      <td>73.0</td>\n","      <td>22069.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>186730 rows × 14 columns</p>\n","</div>"],"text/plain":["                                  user_id   age  ... other doesnt_say\n","1        QEVuQwEAWRNGnuTRqXG2996KSkTIEw==  31.0  ...   0.0        0.0\n","179      QEVuQwEAGE+cRgOKW7/YPSArqzk5bg==  31.0  ...   0.0        0.0\n","180      QEVuQwEAGE+cRgOKW7/YPSArqzk5bg==  31.0  ...   0.0        0.0\n","181      QEVuQwEAGE+cRgOKW7/YPSArqzk5bg==  31.0  ...   0.0        0.0\n","182      QEVuQwEAGE+cRgOKW7/YPSArqzk5bg==  31.0  ...   0.0        0.0\n","...                                   ...   ...  ...   ...        ...\n","3487611  QEVuQwEAk8TstQqKvjz8p2J6FAqOcA==  24.0  ...   0.0        0.0\n","3487612  QEVuQwEAk8TstQqKvjz8p2J6FAqOcA==  24.0  ...   0.0        0.0\n","3487613  QEVuQwEAk8TstQqKvjz8p2J6FAqOcA==  24.0  ...   0.0        0.0\n","3487614  QEVuQwEAk8TstQqKvjz8p2J6FAqOcA==  24.0  ...   0.0        0.0\n","3487615  QEVuQwEAk8TstQqKvjz8p2J6FAqOcA==  24.0  ...   0.0        0.0\n","\n","[186730 rows x 14 columns]"]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"code","metadata":{"id":"X3qjuQSmCqWU","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":221},"executionInfo":{"status":"ok","timestamp":1592682292160,"user_tz":420,"elapsed":2768,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"outputId":"514e6ca0-0cb8-4eca-b77f-7fb5b5a4d694"},"source":["distinct_trackable_types = fd_df['trackable_type'].unique()\n","distinct_trackable_types\n","for type1 in distinct_trackable_types:\n","  fd_df[type1] = np.zeros(len(fd_df))\n","  fd_df.loc[fd_df.trackable_type == type1, type1] = 1"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py:966: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self.obj[item] = s\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"Yugz_gTk7qrN","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":221},"outputId":"d1c0091d-a3f9-4e0d-d5f4-6e385b15a9ee"},"source":["distinct_trackable_names = fd_df['trackable_name'].unique()\n","for name1 in distinct_trackable_names:\n","  fd_df[name1] = np.zeros(len(fd_df))\n","  fd_df.loc[fd_df.trackable_type == type1, type1] = 1"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  This is separate from the ipykernel package so we can avoid doing imports until\n","/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py:966: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self.obj[item] = s\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"YK_ouhmJmd-B","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":119},"executionInfo":{"status":"ok","timestamp":1592682294784,"user_tz":420,"elapsed":1185,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"outputId":"1126ced9-f975-448f-850f-75c1448e5a89"},"source":["fd_df.loc[fd_df.sex == 'male', 'male'] = 1\n","fd_df.loc[fd_df.sex == 'female', 'female'] = 1\n","fd_df.loc[fd_df.sex == 'other', 'other'] = 1\n","fd_df.loc[fd_df.sex == 'doesnt_say', 'doesnt_say'] = 1"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py:966: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self.obj[item] = s\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"vDT3AdrMnZMZ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":221},"outputId":"9b3672c6-2905-44a1-c7a2-e6c2799ab22b"},"source":["countries = fd_df['country'].unique()\n","for country1 in countries:\n","  fd_df[country1] = np.zeros(len(fd_df))\n","  fd_df.loc[fd_df.country == country1, country1] = 1"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  This is separate from the ipykernel package so we can avoid doing imports until\n","/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py:966: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self.obj[item] = s\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"Rju9-UeEFN-t","colab_type":"text"},"source":["###Task E: Numerics\n","\n","Explore the data and try to determine what your best guess of what (a) trackable_id and (b) trackable_value mean (you can feel free to play around in Pandas and consult the dataset webpage). What is the range of trackable_value?"]},{"cell_type":"code","metadata":{"id":"mpADhowQFMIs","colab_type":"code","colab":{}},"source":["trackable_ids = fd_df['trackable_id'].unique()\n","# there are 113,840 trackable_ids\n","trackable_values = fd_df['trackable_value'].unique()\n","# there are 8394 trackable_values -- they are of very different types (some are strings, integers, weird values, etc.)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rAY7EH12FeDW","colab_type":"text"},"source":["###Task F: Self-guided exploration\n","\n","Now that you have had a chance to play around with this dataset, try to formulate 3-5 exploratory questions you can answer by looking at the data\n","\n","Write down your questions and do the investigative work to answer these data-related questions. The more interesting, the better"]},{"cell_type":"code","metadata":{"id":"IWDDnVxIKQxi","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":68},"executionInfo":{"status":"ok","timestamp":1592682703772,"user_tz":420,"elapsed":1139,"user":{"displayName":"Ayush Raj","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiidtS5N__ylVZXEyh0ay7E6S9FjEJHLu9yNSQxsA=s64","userId":"02422483954573724390"}},"outputId":"d7907572-c650-4a09-f054-8ec06bb53068"},"source":["# Question 1: How many different types of \"trackable_names\" are there? \n","# Question for class: Why are there so many?\n","trackable_names = fd_df['trackable_name'].unique()\n","print(len(trackable_names))\n","# answer: 54263 different trackable names\n","\n","# Question 2: Is this data worldwide? How many different countries are people from?\n","countries = fd_df['country'].unique()\n","print(len(countries))\n","# answer: 133 different countries\n","\n","# Question 3: What does trackable_value represent?\n","trackable_values = fd_df['trackable_value'].unique()\n","print(len(trackable_values))\n","# Why are there so many different types of values in trackable_values?"],"execution_count":null,"outputs":[{"output_type":"stream","text":["54263\n","133\n","8394\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"8AgHtmv-F18y","colab_type":"text"},"source":["###Task G: Machine learning questions\n","\n","Given this massive dataset, it can be difficult to figure out how machine learning can be used. Try to come up with 1-2 prediction tasks that you could think you could use this dataset to train a machine learning algorithm to effectively answer. Be specific about what the features and labels are.\n","\n","Optional: try to come up with a time-series related machine learning task"]},{"cell_type":"code","metadata":{"id":"9SC4dvm1KSO1","colab_type":"code","colab":{}},"source":["# Task 1: Can we tell whether a person is diseased or not based on their symptoms? - binary classification, can use LSTM/CNN to take in previous data and then make the prediction"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XCh9Gy3UKXRa","colab_type":"text"},"source":["###Task H: ML preprocessing\n","\n","We need to get data into a state for machine learning. Select one of the tasks above and do the following tasks:\n","\n","1. Construct a dataframe that will have one example per row with all of the information for the feature(s) and label(s) for each examples in columns\n","\n","2. Clearly identify your label and preprocess the numerical/categorical label into a label list y\n","\n","3. Preprocess your features to construct a feature vector or matrix that corresponds to each row of your dataframe / each example.\n","\n","4. Randomize and reshape to obtain a clean x_train, y_train, x_test, y_test "]},{"cell_type":"code","metadata":{"id":"YEQ7i777L_cY","colab_type":"code","colab":{}},"source":["# Add all your code here\n","# Be sure to appropriately document your code."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TSrniple52Ju","colab_type":"text"},"source":["### Task I [Challenge]: Simple predictors\n","\n","Implement **2** very simple sanity-check predictors on the data (examples: predicting the most popular class, predicting a random label, for a time series, predicting the current time-step's label)"]},{"cell_type":"code","metadata":{"id":"yU_UIgR658Ao","colab_type":"code","colab":{}},"source":["# Add all your code here\n","# Be sure to appropriately document your code."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4q-LsLWjLm1F","colab_type":"text"},"source":["###Task J [Challenge]: Machine learning at last\n","\n","We are finally ready to get down to the business of machine learning!\n","\n","1. Implement **1-2** baseline models (e.g. kNN, support vector machine, linear regression) on your data\n","\n","2. Evaluate the above models and visualize your results, predictions, and accuracy\n","\n","3. Consider a higher-capacity model if warranted (i.e. a neural network or weak ensemble model). "]},{"cell_type":"code","metadata":{"id":"r8GMH-Ar5ua4","colab_type":"code","colab":{}},"source":["# Add all your code here\n","# Be sure to document your code"],"execution_count":null,"outputs":[]}]}